<?php
namespace common\components;
use Resque;
use Resque_Job_Status;
use ResqueScheduler;
use Yii;
use yii\base\Component;
/**
 * Resque组件
 *
 * Class Yii2Resque
 * @package common\components
 */
class Yii2Resque extends Component
{
    const QUEUE_ORDERS = "orders"; //订单队列

    /**
     * 执行
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $redis = Yii::$app->redis;
        Resque::setBackend("redis://:$redis->password@$redis->hostname:$redis->port");
    }

    /**
     * Create a new job and save it to the specified queue.
     *
     * @param string $queue The name of the queue to place the job in.
     * @param string $class The name of the class that contains the code to execute the job.
     * @param array $args Any optional arguments that should be passed when the job is executed.
     *
     * @return string
     */
    public function createJob($queue, $class, $args = array(), $track_status = false)
    {
        return Resque::enqueue($queue, $class, $args, $track_status);
    }

    /**
     * Create a new scheduled job and save it to the specified queue.
     *
     * @param int $in Second count down to job.
     * @param string $queue The name of the queue to place the job in.
     * @param string $class The name of the class that contains the code to execute the job.
     * @param array $args Any optional arguments that should be passed when the job is executed.
     */
    public function enqueueJobIn($in, $queue, $class, $args = array())
    {
        ResqueScheduler::enqueueIn($in, $queue, $class, $args);
    }

    /**
     * Create a new scheduled job and save it to the specified queue.
     *
     * @param timestamp $at UNIX timestamp when job should be executed.
     * @param string $queue The name of the queue to place the job in.
     * @param string $class The name of the class that contains the code to execute the job.
     * @param array $args Any optional arguments that should be passed when the job is executed.
     */
    public function enqueueJobAt($at, $queue, $class, $args = array())
    {
        ResqueScheduler::enqueueAt($at, $queue, $class, $args);
    }

    /**
     * Get delayed jobs count
     *
     * @return int
     */
    public function getDelayedJobsCount()
    {
        return (int)Resque::redis()->zcard('delayed_queue_schedule');
    }

    /**
     * Check job status
     *
     * @param string $token Job token ID
     *
     * @return string Job Status
     */
    public function status($token)
    {
        $status = new Resque_Job_Status($token);
        return $status->get();
    }

    /**
     * Return Redis
     *
     * @return object Redis instance
     */
    public function redis()
    {
        return Resque::redis();
    }

    /**
     * Get queues
     *
     * @return object Redis instance
     */
    public function getQueues()
    {
        return $this->redis()->zRange('delayed_queue_schedule', 0, -1);
    }
}